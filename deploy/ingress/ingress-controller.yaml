apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-controller
  namespace: ingress-system
  labels:
    app.kubernetes.io/name: ingress-controller
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ingress-controller
  labels:
    app.kubernetes.io/name: ingress-controller
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - services
  - namespaces
  - events
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ingress-controller
  namespace: ingress-system
  labels:
    app.kubernetes.io/name: ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-controller
subjects:
- kind: ServiceAccount
  name: ingress-controller
  namespace: ingress-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-default-backend
  namespace: ingress-system
  labels:
    app.kubernetes.io/name: ingress-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      run: ingress-default-backend
  template:
    metadata:
      labels:
        run: ingress-default-backend
        app.kubernetes.io/name: ingress-controller
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name: ingress-default-backend
        image: k8s.gcr.io/defaultbackend-amd64:1.5
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-default-backend
  namespace: ingress-system
  labels:
    app.kubernetes.io/name: ingress-controller
spec:
  selector:
    run: ingress-default-backend
  ports:
  - name: backend
    port: 8080
    protocol: TCP
    targetPort: 8080

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-ingress-config
  namespace: ingress-system
  labels:
    app.kubernetes.io/name: ingress-controller
data:
  check: "true"
  ssl-redirect: "true"
  ssl-redirect-code: "302"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ingress-controller
  namespace: ingress-system
  labels:
    app.kubernetes.io/name: ingress-controller
spec:
  minReadySeconds: 0
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      run: haproxy-ingress
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-controller
        run: haproxy-ingress
    spec:
      serviceAccountName: ingress-controller
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      priorityClassName: system-node-critical
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - name: haproxy-ingress
        image: haproxytech/kubernetes-ingress:1.5.3
        args:
          - --default-ssl-certificate=ingress-system/ingress-certs
          - --configmap=ingress-system/haproxy-ingress-config
          - --default-backend-service=ingress-system/ingress-default-backend
          - --ingress.class=haproxy
          - --log=debug
        securityContext:
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        resources:
          requests:
            cpu: "100m"
            memory: "64Mi"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 1042
        readinessProbe:
          httpGet:
            path: /healthz
            port: 1042
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: stats
          containerPort: 1024
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: haproxy
spec:
  controller: haproxy.org/ingress-controller
